name: build

on: [push, pull_request]

env:
  UPSTREAM: tierconnect

jobs:
  tests:
    runs-on: ubuntu-latest
    name: Unit, Integration and Acceptance Tests

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      #Login to docker
      -
        name: Login to Docker
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCLOUD_SA_KEY }}

      - name: Download Migration Backup
        uses: actions/download-artifact@v4
        with:
          run-id: 14897162939
          repository: julio-rocha-coderoad-com/compose-project
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Uncompress compose-data
        run: tar -xvf compose-data-backup/compose-data.tar

      - name: Setup Images version
        run: |
          ENV_NAME="dev" # Default
          if ${{ github.ref_type == 'tag' }}; then
            ENV_NAME="tag"
          elif ${{ startsWith(github.ref, 'refs/heads/canary/') }}; then
            ENV_NAME="canary"
          fi
          
          echo "Detected environment: $ENV_NAME"          
          # Load the specific environment file
          CONFIG_FILE="environment/${ENV_NAME}-environment"
          echo "Loading configuration from $CONFIG_FILE"
          
          # Add variables to the environment
          set -a
          source $CONFIG_FILE
          set +a
          cat $CONFIG_FILE >> $GITHUB_ENV

      - name: Pulling Images
        run: docker compose pull
      - name: Show pulled images
        run: docker images

      - name: Configuration Permissions
        run: chmod +x ./config-before-start.sh
      - name: Integration Environment Configuration
        run: ./config-before-start.sh eth0

      - name: Show logs if failure
        run: docker compose logs
        if: failure()
      - name: Stopping applications
        run: docker compose down

      - name: Compress compose-data
        run: sudo tar -cvf compose-data.tar compose-data


      - name: Docker Build
        run: |
          export TAG=$(echo /${GITHUB_REF} | cut -d/ -f 4,5)
          export DOCKER_TAG=${TAG/\//_}
          docker build -f Dockerfile --tag gcr.io/mojix-registry/integration-tests:${DOCKER_TAG} .
      - name: Docker Publish
        run: |
          export TAG=$(echo /${GITHUB_REF} | cut -d/ -f 4,5)
          export DOCKER_TAG=${TAG/\//_}
          if [ ${GITHUB_REPOSITORY_OWNER} == ${UPSTREAM} ]; then
            docker push gcr.io/mojix-registry/integration-tests:${DOCKER_TAG}
            echo "Image is: gcr.io/mojix-registry/integration-tests:${DOCKER_TAG}"
          else
            echo "This build will not generate a Docker Image"
          fi

      - name: Upload Backup
        uses: actions/upload-artifact@v4
        with:
          name: compose-data-backup
          path: compose-data.tar
      - name: Upload Sql Backup
        uses: actions/upload-artifact@v4
        with:
          name:  mysql-backup
          path: mysql_backup.sql.tar